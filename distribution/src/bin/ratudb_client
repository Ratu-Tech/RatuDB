#!/usr/bin/env bash

######################
# ratudb-client 工具 ##
# by lei            ##
######################

GRAPH=false

if [ -n "$CQLSH_PYTHON" ]; then
      USER_SPECIFIED_PYTHON="$CQLSH_PYTHON"
fi


# filter "--python" option and its value, and keep remaining arguments as it is
USER_SPECIFIED_PYTHON_OPTION=false

for option do
  shift
  case "$option" in
    --graph)
      GRAPH=true
      ;;
    --python)
      USER_SPECIFIED_PYTHON_OPTION=true
        ;;
      --)
        break
      ;;
    *)
      if [ "$USER_SPECIFIED_PYTHON_OPTION" = true ] ; then
        USER_SPECIFIED_PYTHON_OPTION=false
        USER_SPECIFIED_PYTHON="$option"
      else
        set -- "$@" "$option"
      fi
      ;;
  esac
done


if [[ $GRAPH == true ]];then

  set -e
  set -u

  USER_DIR=`pwd`

  cd $(dirname $0)
  DIR=`pwd`

  SCRIPT_NAME=`basename $0`
  SOURCE="${SCRIPT_NAME}"
  while [ -h "${SCRIPT_NAME}" ]; do
    SOURCE="$(readlink "${SCRIPT_NAME}")"
    DIR="$( cd -P "$( dirname "${SOURCE}" )" && pwd )"
    cd ${DIR}
  done
  BIN="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
  # Set $CFG to $BIN/../config
  cd -P $BIN/../config
  CFG=$(pwd)
  # Set $LIB to $BIN/../lib
  cd -P $BIN/../lib
  LIB=$(pwd)
  # Set $LIB to $BIN/../config/ext
  cd -P $BIN/../config/ext
  EXT=$(pwd)
  # Initialize classpath to $CFG
  CP="$CFG"
  # Add the slf4j-log4j12 binding
  CP="$CP":$(find -L $LIB -name 'slf4j-log4j12*.jar' | sort | tr '\n' ':')
  # Add the jars in $BIN/../lib that start with "janusgraph"
  CP="$CP":$(find -L $LIB -name 'janusgraph*.jar' | sort | tr '\n' ':')
  # Add the remaining jars in $BIN/../lib.
  CP="$CP":$(find -L $LIB -name '*.jar' \
                  \! -name 'janusgraph*' \
                  \! -name 'slf4j-log4j12*.jar' | sort | tr '\n' ':')
  # Add the jars in $BIN/../ext (at any subdirectory depth)
  CP="$CP":$(find -L $EXT -name '*.jar' | sort | tr '\n' ':')

  cd ..
  SYSTEM_EXT_DIR="`pwd`/ext"

  JAVA_OPTIONS=${JAVA_OPTIONS:-}

  if [ ! -z "${JAVA_OPTIONS}" ]; then
    USER_EXT_DIR=$(grep -o '\-Dtinkerpop.ext=\(\([^"][^ ]*\)\|\("[^"]*"\)\)' <<< "${JAVA_OPTIONS}" | cut -f2 -d '=' | xargs -0 echo)
    if [ ! -z "${USER_EXT_DIR}" -a ! -d "${USER_EXT_DIR}" ]; then
      mkdir -p "${USER_EXT_DIR}"
      cp -R ${SYSTEM_EXT_DIR}/* ${USER_EXT_DIR}/
    fi
  fi

  case `uname` in
    CYGWIN*)
      CP="$(cygpath -p -w "$CP")"
      ;;
  esac

  CP=$CP:$( find -L "${SYSTEM_EXT_DIR}" "${USER_EXT_DIR:-${SYSTEM_EXT_DIR}}" -mindepth 1 -maxdepth 1 -type d | \
            sort -u | sed 's/$/\/plugin\/*/' | tr '\n' ':' )

  export CLASSPATH="${CLASSPATH:-}:$CP"

  # Find Java
  if [ -z "${JAVA_HOME:-}" ]; then
      JAVA="java -server"
  else
      JAVA="$JAVA_HOME/bin/java -server"
  fi

  # Script debugging is disabled by default, but can be enabled with -l
  # TRACE or -l DEBUG or enabled by exporting
  # SCRIPT_DEBUG=nonemptystring to gremlin.sh's environment
  if [ -z "${SCRIPT_DEBUG:-}" ]; then
      SCRIPT_DEBUG=
  fi

  # Process options
  MAIN_CLASS=org.apache.tinkerpop.gremlin.console.Console
  while getopts ":lv" opt; do
      case "$opt" in
      l) eval GREMLIN_LOG_LEVEL=\$$OPTIND
         OPTIND="$(( $OPTIND + 1 ))"
         if [ "$GREMLIN_LOG_LEVEL" = "TRACE" -o \
              "$GREMLIN_LOG_LEVEL" = "DEBUG" ]; then
  	   SCRIPT_DEBUG=y
         fi
         ;;
      v) MAIN_CLASS=org.janusgraph.core.JanusGraph
      esac
  done

  if [ -z "${HADOOP_GREMLIN_LIBS:-}" ]; then
      export HADOOP_GREMLIN_LIBS="$LIB"
  fi

  JAVA_OPTIONS="${JAVA_OPTIONS} -Duser.working_dir=${USER_DIR} -Dtinkerpop.ext=${USER_EXT_DIR:-${SYSTEM_EXT_DIR}} -Dlog4j2.configurationFile=file:$USER_DIR/config/log4j2.xml -javaagent:$LIB/jamm-0.3.2.jar -Dgremlin.io.kryoShimService=org.janusgraph.hadoop.serialize.JanusGraphKryoShimService"
  JAVA_OPTIONS=$(awk -v RS=' ' '!/^$/ {if (!x[$0]++) print}' <<< "${JAVA_OPTIONS}" | grep -v '^$' | paste -sd ' ' -)

  if [ -n "$SCRIPT_DEBUG" ]; then
      # in debug mode enable debugging of :install command
      JAVA_OPTIONS="${JAVA_OPTIONS} -Divy.message.logger.level=4 -Dgroovy.grape.report.downloads=true"
      echo "CLASSPATH: $CLASSPATH"
      set -x
  fi

  # Start the JVM, execute the application, and return its exit code
  exec $JAVA $JAVA_OPTIONS $MAIN_CLASS

else

  if [ "$USER_SPECIFIED_PYTHON_OPTION" = true ] ; then
      echo "You must specify a python interpreter path with the --python option"
      exit 1
  fi

  # get a version string for a Python interpreter
  get_python_version() {
      interpreter=$1
      version=$($interpreter -c "import os; print('{}.{}'.format(os.sys.version_info.major, os.sys.version_info.minor))" 2> /dev/null)
      echo "$version"
  }

  # test whether a version string matches one of the supported versions for cqlsh
  is_supported_version() {
      version=$1
      major_version="${version%.*}"
      minor_version="${version#*.}"
      # python3.6+ is supported
      if [ "$major_version" = 3 ] && [ "$minor_version" -ge 6 ]; then
          echo "supported"
      else
          echo "unsupported"
      fi
  }

  run_if_supported_version() {
      # get the interpreter and remove it from argument
      interpreter="$1" shift

      version=$(get_python_version "$interpreter")
      if [ -n "$version" ]; then
          if [ "$(is_supported_version "$version")" = "supported" ]; then
              exec "$interpreter" "$($interpreter -c "import os; print(os.path.dirname(os.path.realpath('$0')))")/cqlsh.py" "$@"
              exit
          else
              echo "Warning: unsupported version of Python:" $version >&2
          fi
      fi
  }


  if [ "$USER_SPECIFIED_PYTHON" != "" ]; then
      # run a user specified Python interpreter
      run_if_supported_version "$USER_SPECIFIED_PYTHON" "$@"
  else
      for interpreter in python3 python; do
          run_if_supported_version "$interpreter" "$@"
      done
  fi

  echo "No appropriate Python interpreter found." >&2
  exit 1
fi
